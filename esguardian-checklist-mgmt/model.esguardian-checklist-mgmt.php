<?php
//
// File generated by ... on the 2016-01-19T12:23:21+0100
// Please do not edit manually
//

/**
 * Classes and menus for esguardian-checklist-mgmt (version 1.2.0)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */



abstract class SecurityCheckListItem extends SecurityCI
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => 'name',
			'state_attcode' => '',
			'reconc_keys' => array('name', 'finalclass'),
			'db_table' => 'securitychecklistitem',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("securitychecklist_id", array("targetclass"=>'SecurityCheckList', "allowed_values"=>null, "sql"=>'securitychecklist_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("securitychecklist_name", array("allowed_values"=>null, "extkey_attcode"=>'securitychecklist_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("scliequivalence_id", array("targetclass"=>'SCLIEquivalence', "allowed_values"=>null, "sql"=>'scliequivalence_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("scliequivalence_name", array("allowed_values"=>null, "extkey_attcode"=>'scliequivalence_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("scliequivalence_description", array("allowed_values"=>null, "extkey_attcode"=>'scliequivalence_id', "target_attcode"=>'description', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSet("scli_instance_list", array("linked_class"=>'SecurityCheckListItemInstance', "ext_key_to_me"=>'securitychecklistitem_id', "count_min"=>0, "count_max"=>0, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'name',
  1 => 'securitychecklist_id',
  2 => 'description',
  3 => 'scliequivalence_id',
  4 => 'scliequivalence_description',
  5 => 'managers_list',
  6 => 'documents_list',
  7 => 'tickets_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'finalclass',
  1 => 'securitychecklist_id',
  2 => 'name',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'finalclass',
  1 => 'securitychecklist_id',
  2 => 'name',
));

	}


}


class OrganizationalSCLI extends SecurityCheckListItem
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('securitychecklist_name', 'name'),
			'state_attcode' => '',
			'reconc_keys' => array('name'),
			'db_table' => 'organizationalscli',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("scope", array("linked_class"=>'lnkOrganizationToOrganizationalSCLI', "ext_key_to_me"=>'organizationalscli_id', "ext_key_to_remote"=>'org_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'name',
  1 => 'securitychecklist_id',
  2 => 'description',
  3 => 'scliequivalence_id',
  4 => 'scliequivalence_description',
  5 => 'managers_list',
  6 => 'documents_list',
  7 => 'scope',
  8 => 'tickets_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'securitychecklist_id',
  1 => 'name',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'securitychecklist_id',
  1 => 'name',
));

	}



	
                    function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
	                {
		                parent::DisplayBareRelations($oPage, $bEditMode);                
	                

		                $ItemID = $this->GetKey();
		                $sExtKeyToMe = 'securitychecklist_id';

		                $sClass = 'InstanceOfOrganizationalSCLI';
		                $sExtKeyToMe = 'securitychecklistitem_id';
		                $sStatusAtt = 'status';
		                $sNotDone = 'not_done';
		                $sDone = 'done';		                


	                    $oSearchNotDone = DBSearch::FromOQL("SELECT $sClass WHERE $sExtKeyToMe = '$ItemID' AND $sStatusAtt = '$sNotDone'");
	                    $oSetNotDone = new DBObjectSet($oSearchNotDone);
	                    $oSearchDone = DBSearch::FromOQL("SELECT $sClass WHERE $sExtKeyToMe = '$ItemID' AND $sStatusAtt = '$sDone'");
	                    $oSetDone = new DBObjectSet($oSearchDone);
		                    
		                $iTotal = $oSetNotDone->Count() + $oSetDone->Count();
		                
		                
		                if ($iTotal != 0)
		                {
		                    $sCount = ' ('.$oSetNotDone->Count().'/'.$iTotal.')';
		                }
		                else
		                {
		                    $sCount = '';
		                }
		                
		                $oPage->SetCurrentTab(Dict::S('Class:SecurityCheckListItem/Tab:scli_instance_list').$sCount);	                	                
		                	                
		                $sBlockId = $sClass.'_Uncompleted';
		                $sBlockHeader = Dict::S('Class:'.$sClass.'/BlockHeader:Uncompleted');
		                $oPage->add('<fieldset>');
		                $oPage->add('<legend>'.$sBlockHeader.'</legend>');
		                $oBlock = DisplayBlock::FromObjectSet($oSetNotDone, 'list');
		                $oBlock->Display($oPage, $sBlockId, array('menu' => false));
		                $oPage->add('</fieldset>');
		                
		                $sBlockId = $sClass.'_completed';
		                $sBlockHeader = Dict::S('Class:'.$sClass.'/BlockHeader:completed');
		                $oPage->add('<fieldset>');
		                $oPage->add('<legend>'.$sBlockHeader.'</legend>');
		                $oBlock = DisplayBlock::FromObjectSet($oSetDone, 'list');
		                $oBlock->Display($oPage, $sBlockId, array('menu' => false));
		                $oPage->add('</fieldset>');                
		                
	                }
	                

	/**
                    * Placeholder for backward compatibility (iTop <= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */
 
                    protected function AfterUpdate()
                    {
                        // Если мы изменили класс эквивалентности, то надо пересчитать статус
                        // для всех реализаций нашего и эквивалентных правил. 
                        // Пересчет по принципу: если одна из реализаций имеет статус "не выполнено",
                        // То всем реализациям для этой Организации присваивается статус "не выполнено".
                        
                        // Проверяем был ли изменен класс эквивалентности
                        
                        $aDelta = $this->ListChanges();
                        if (!array_key_exists('scliequivalence_id',$aDelta))
                        {
                            return;
                        }
                        
                        
                        
                        $scli_id = $this->GetKey();
                        $eq_id = $this->Get('scliequivalence_id');
                        
                        if ($eq_id == null) //Если класс эквивалентности установлен в "неопределен" то и делать ничего не надо
                        {
                            return;
                        }
                        
                        // Определяем список реализаций нашего правила и собираем массив id организаций
                        // в которых будем искать эквиваленты
                        
                        $oSearch = DBSearch::FromOQL("SELECT InstanceOfOrganizationalSCLI WHERE securitychecklistitem_id = '$scli_id'");
                        $oSetInstance = new DBObjectSet($oSearch);
                        if ($oSetInstance->Count() == 0)
                        {
                            return;
                        }
                        $oSetInstance->Seek(0);
                        $aOrg_ids = array();
                        while ($oInstance = $oSetInstance->Fetch())
                        {
                            $aOrg_ids[] = $oInstance->Get('org_id');                       
                        }
                        
                        foreach ($aOrg_ids as $org_id) // теперь проходим по всем организациям
                        {
                            $oSearch = DBSearch::FromOQL("SELECT InstanceOfOrganizationalSCLI WHERE securitychecklistitem_id = '$scli_id' AND org_id ='$org_id'");
                            $oSet = new DBObjectSet($oSearch);
                            $oMyInstance = $oSet->Fetch();
                            $status = $oMyInstance->Get('status'); // читаем статус своей реализации
                            
                            // Ищем эквивалентные мне со статусом отличным от моего
                            
                            $oSearch = DBSearch::FromOQL("SELECT InstanceOfOrganizationalSCLI WHERE scliequivalence_id = '$eq_id' AND org_id ='$org_id' AND status != '$status'");
                            $oSet = new DBObjectSet($oSearch);
                            if ($oSet->Count() != 0) // нашли
                            {
                                $oInstance = $oSet->Fetch(); // достаточно одного, статусы эквивалентных сменятся автоматически
                                
                                if ($status == 'done')
                                {
                                    $oMyInstance->Set('status','not_done');
                                    $oMyInstance->DBWrite();
                                }
                                else
                                {
                                    $oInstance->Set('status','not_done');
                                    $oInstance->DBWrite();
                                }
                                    
                            }
                            
                        }
                        
                    } 
                    

}


class FunctionalSCLI extends SecurityCheckListItem
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('securitychecklist_name', 'name'),
			'state_attcode' => '',
			'reconc_keys' => array('name'),
			'db_table' => 'functionalscli',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("scope", array("linked_class"=>'lnkGroupToFunctionalSCLI', "ext_key_to_me"=>'functionalscli_id', "ext_key_to_remote"=>'group_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'name',
  1 => 'securitychecklist_id',
  2 => 'description',
  3 => 'scliequivalence_id',
  4 => 'scliequivalence_description',
  5 => 'managers_list',
  6 => 'documents_list',
  7 => 'scope',
  8 => 'tickets_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'securitychecklist_id',
  1 => 'name',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'securitychecklist_id',
  1 => 'name',
));

	}



	
                    function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
	                {
		                parent::DisplayBareRelations($oPage, $bEditMode);                
	                

		                $ItemID = $this->GetKey();


		                $sClass = 'InstanceOfFunctionalSCLI';
		                $sExtKeyToMe = 'securitychecklistitem_id';
		                $sStatusAtt = 'status';
		                $sNotDone = 'not_done';
		                $sDone = 'done';		                


	                    $oSearchNotDone = DBSearch::FromOQL("SELECT $sClass WHERE $sExtKeyToMe = '$ItemID' AND $sStatusAtt = '$sNotDone'");
	                    $oSetNotDone = new DBObjectSet($oSearchNotDone);
	                    $oSearchDone = DBSearch::FromOQL("SELECT $sClass WHERE $sExtKeyToMe = '$ItemID' AND $sStatusAtt = '$sDone'");
	                    $oSetDone = new DBObjectSet($oSearchDone);
		                    
		                $iTotal = $oSetNotDone->Count() + $oSetDone->Count();
		                
		                
		                if ($iTotal != 0)
		                {
		                    $sCount = ' ('.$oSetNotDone->Count().'/'.$iTotal.')';
		                }
		                else
		                {
		                    $sCount = '';
		                }
		                
		                $oPage->SetCurrentTab(Dict::S('Class:SecurityCheckListItem/Tab:scli_instance_list').$sCount);	                	                
		                	                
		                $sBlockId = $sClass.'_Uncompleted';
		                $sBlockHeader = Dict::S('Class:'.$sClass.'/BlockHeader:Uncompleted');
		                $oPage->add('<fieldset>');
		                $oPage->add('<legend>'.$sBlockHeader.'</legend>');
		                $oBlock = DisplayBlock::FromObjectSet($oSetNotDone, 'list');
		                $oBlock->Display($oPage, $sBlockId, array('menu' => false));
		                $oPage->add('</fieldset>');
		                
		                $sBlockId = $sClass.'_completed';
		                $sBlockHeader = Dict::S('Class:'.$sClass.'/BlockHeader:completed');
		                $oPage->add('<fieldset>');
		                $oPage->add('<legend>'.$sBlockHeader.'</legend>');
		                $oBlock = DisplayBlock::FromObjectSet($oSetDone, 'list');
		                $oBlock->Display($oPage, $sBlockId, array('menu' => false));
		                $oPage->add('</fieldset>');                
		                
	                }
	                

	/**
                    * Placeholder for backward compatibility (iTop <= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */
 
                    protected function AfterUpdate()
                    {
                        // Если мы изменили класс эквивалентности, то надо пересчитать статус
                        // для всех реализаций нашего и эквивалентных правил. 
                        // Пересчет по принципу: если одна из реализаций для КЕ имеет статус "не выполнено",
                        // То всем реализациям для этого КЕ присваивается статус "не выполнено".
                        
                        // Проверяем был ли изменен класс эквивалентности
                        
                        $aDelta = $this->ListChanges();
                        if (!array_key_exists('scliequivalence_id',$aDelta))
                        {
                            return;
                        }
                        
                        
                        
                        $scli_id = $this->GetKey();
                        $eq_id = $this->Get('scliequivalence_id');
                        
                        if ($eq_id == null)
                        {
                            return;
                        }
                        
                        // Определяем список реализаций нашего правила и собираем массив id KE
                        
                        $oSearch = DBSearch::FromOQL("SELECT InstanceOfFunctionalSCLI WHERE securitychecklistitem_id = '$scli_id'");
                        $oSetInstance = new DBObjectSet($oSearch);
                        if ($oSetInstance->Count() == 0)
                        {
                            return;
                        }
                        $oSetInstance->Seek(0);
                        $aCI_ids = array();
                        while ($oInstance = $oSetInstance->Fetch())
                        {
                            $aCI_ids[] = $oInstance->Get('functionalci_id');                       
                        }
                        
                        foreach ($aCI_ids as $ci_id)
                        {
                            $oSearch = DBSearch::FromOQL("SELECT InstanceOfFunctionalSCLI WHERE securitychecklistitem_id = '$scli_id' AND functionalci_id ='$ci_id'");
                            $oSet = new DBObjectSet($oSearch);
                            $oMyInstance = $oSet->Fetch();
                            $status = $oMyInstance->Get('status');
                            
                            // Ищем эквивалентные мне со статусом отличным от моего
                            
                            $oSearch = DBSearch::FromOQL("SELECT InstanceOfFunctionalSCLI WHERE scliequivalence_id = '$eq_id' AND functionalci_id ='$ci_id' AND status != '$status'");
                            $oSet = new DBObjectSet($oSearch);
                            if ($oSet->Count() != 0) // нашли
                            {
                                $oInstance = $oSet->Fetch(); // достаточно одного, статусы эквивалентных сменятся автоматически
                                
                                if ($status == 'done')
                                {
                                    $oMyInstance->Set('status','not_done');
                                    $oMyInstance->DBWrite();
                                }
                                else
                                {
                                    $oInstance->Set('status','not_done');
                                    $oInstance->DBWrite();
                                }
                                    
                            }
                            
                        }
                        
                    } 
                    

}


class SCLIEquivalence extends SecurityCI
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => 'name',
			'state_attcode' => '',
			'reconc_keys' => array('name'),
			'db_table' => 'scliequivalence',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeLinkedSet("scli_list", array("linked_class"=>'SecurityCheckListItem', "ext_key_to_me"=>'scliequivalence_id', "count_min"=>0, "count_max"=>0, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'name',
  1 => 'description',
  2 => 'managers_list',
  3 => 'documents_list',
  4 => 'scli_list',
  5 => 'tickets_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'name',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'name',
));

	}


}


abstract class SecurityCheckListItemInstance extends SecurityCI
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('securitychecklist_name', 'scli_name'),
			'state_attcode' => '',
			'reconc_keys' => array('scli_name', 'finalclass'),
			'db_table' => 'securitychecklistiteminstance',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("securitychecklistitem_id", array("targetclass"=>'SecurityCheckListItem', "allowed_values"=>null, "sql"=>'securitychecklistitem_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("scli_name", array("allowed_values"=>null, "extkey_attcode"=>'securitychecklistitem_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("scli_description", array("allowed_values"=>null, "extkey_attcode"=>'securitychecklistitem_id', "target_attcode"=>'description', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("scliequivalence_id", array("allowed_values"=>null, "extkey_attcode"=>'securitychecklistitem_id', "target_attcode"=>'scliequivalence_id', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("scliequivalence_name", array("allowed_values"=>null, "extkey_attcode"=>'securitychecklistitem_id', "target_attcode"=>'scliequivalence_name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("scliequivalence_description", array("allowed_values"=>null, "extkey_attcode"=>'securitychecklistitem_id', "target_attcode"=>'scliequivalence_description', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("securitychecklist_id", array("allowed_values"=>null, "extkey_attcode"=>'securitychecklistitem_id', "target_attcode"=>'securitychecklist_id', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("securitychecklist_name", array("allowed_values"=>null, "extkey_attcode"=>'securitychecklistitem_id', "target_attcode"=>'securitychecklist_name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("status", array("allowed_values"=>new ValueSetEnum("done,not_done"), "display_style"=>'list', "sql"=>'status', "default_value"=>'not_done', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'scli_name',
  1 => 'managers_list',
  2 => 'documents_list',
  3 => 'tickets_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'finalclass',
  1 => 'status',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'finalclass',
  1 => 'status',
));

	}


}


class InstanceOfOrganizationalSCLI extends SecurityCheckListItemInstance
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('securitychecklist_name', 'scli_name', 'org_name'),
			'state_attcode' => '',
			'reconc_keys' => array('org_id', 'org_name', 'securitychecklistitem_id', 'scli_name'),
			'db_table' => 'instanceoforganizationalscli',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();



		MetaModel::Init_SetZListItems('details', array (
  0 => 'securitychecklist_id',
  1 => 'securitychecklistitem_id',
  2 => 'org_id',
  3 => 'status',
  4 => 'description',
  5 => 'scli_description',
  6 => 'scliequivalence_id',
  7 => 'scliequivalence_description',
  8 => 'managers_list',
  9 => 'documents_list',
  10 => 'tickets_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'org_id',
  1 => 'securitychecklist_id',
  2 => 'securitychecklistitem_id',
  3 => 'status',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'org_id',
  1 => 'securitychecklist_id',
  2 => 'securitychecklistitem_id',
  3 => 'status',
));

	}



 
                    function DisplayBareProperties(WebPage $oPage, $bEditMode = false, $sx = '', $aExtraParams = array())
                    {
                        $aExtraFlags = (isset($aExtraParams['fieldsFlags'])) ? $aExtraParams['fieldsFlags'] : array();
                        // Запрещаем редактировать атрибуты кроме "status" и "description"
		                $aExtraFlags['securitychecklistitem_id'] = isset($aExtraFlags['securitychecklistitem_id']) ? $aExtraFlags['securitychecklistitem_id'] | OPT_ATT_READONLY : OPT_ATT_READONLY;
		                $aExtraFlags['org_id'] = isset ($aExtraFlags['org_id']) ? $aExtraFlags['org_id'] | OPT_ATT_READONLY : OPT_ATT_READONLY;
		                $aExtraParams['fieldsFlags'] = $aExtraFlags;
		                parent::DisplayBareProperties($oPage, $bEditMode, $sx, $aExtraParams);
                    }
                    

	/**
                    * Placeholder for backward compatibility (iTop <= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */
 
                    protected function AfterUpdate()
                    {
                        // Проверяем был ли изменен статус, если нет, то ничего не делаем
                        
                        $aDelta = $this->ListChanges();
                        if (!array_key_exists('status',$aDelta))
                        {
                            return;
                        }
                        
                        $scli_id = $this->Get('securitychecklistitem_id');
                        $eq_id = $this->Get('scliequivalence_id');
                        $status = $this->Get('status');
                        $org_id = $this->Get('org_id');
                    
                        // Определяем список реализаций эквивалентных нам правил и меняем их статус
                        
                        if ($eq_id == null)
                        {
                            return;
                        }
                        
                        $oSearch = DBSearch::FromOQL("SELECT InstanceOfOrganizationalSCLI WHERE scliequivalence_id = '$eq_id' AND org_id = '$org_id'");
                        $oResultSet = new DBObjectSet($oSearch);
                        $oResultSet->Seek(0);
                        while ($oResult = $oResultSet->Fetch())
                        {
                            if ($status != $oResult->Get('status'))
                            {
                                $oResult->Set('status',$status);
                                $oResult->DBWrite();
                            }
                        }    
                    } 
                    

}


class InstanceOfFunctionalSCLI extends SecurityCheckListItemInstance
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('securitychecklist_name', 'scli_name', 'functionalci_name'),
			'state_attcode' => '',
			'reconc_keys' => array('functionalci_id', 'functionalci_name', 'securitychecklistitem_id', 'scli_name'),
			'db_table' => 'instanceoffunctionalscli',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("functionalci_id", array("targetclass"=>'FunctionalCI', "allowed_values"=>null, "sql"=>'functionalci_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("functionalci_name", array("allowed_values"=>null, "extkey_attcode"=>'functionalci_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'securitychecklist_id',
  1 => 'securitychecklistitem_id',
  2 => 'functionalci_id',
  3 => 'status',
  4 => 'description',
  5 => 'scli_description',
  6 => 'scliequivalence_id',
  7 => 'scliequivalence_description',
  8 => 'managers_list',
  9 => 'documents_list',
  10 => 'tickets_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'functionalci_id',
  1 => 'securitychecklist_id',
  2 => 'securitychecklistitem_id',
  3 => 'status',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'functionalci_id',
  1 => 'securitychecklist_id',
  2 => 'securitychecklistitem_id',
  3 => 'status',
));

	}



 
                    function DisplayBareProperties(WebPage $oPage, $bEditMode = false, $sx = '', $aExtraParams = array())
                    {
                        $aExtraFlags = (isset($aExtraParams['fieldsFlags'])) ? $aExtraParams['fieldsFlags'] : array();
                        // Запрещаем редактировать атрибуты кроме "status" и "description"
		                $aExtraFlags['securitychecklistitem_id'] = isset($aExtraFlags['securitychecklistitem_id']) ? $aExtraFlags['securitychecklistitem_id'] | OPT_ATT_READONLY : OPT_ATT_READONLY;
		                $aExtraFlags['functionalci_id'] = isset ($aExtraFlags['functionalci_id']) ? $aExtraFlags['functionalci_id'] | OPT_ATT_READONLY : OPT_ATT_READONLY;
		                $aExtraParams['fieldsFlags'] = $aExtraFlags;
		                parent::DisplayBareProperties($oPage, $bEditMode, $sx, $aExtraParams);
                    }
                    

	/**
                    * Placeholder for backward compatibility (iTop <= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */
 
                    protected function AfterUpdate()
                    {
                        // Проверяем был ли изменен статус, если нет, то ничего не делаем
                        
                        $aDelta = $this->ListChanges();
                        if (!array_key_exists('status',$aDelta))
                        {
                            return;
                        }
                        
                        $scli_id = $this->Get('securitychecklistitem_id');
                        $eq_id = $this->Get('scliequivalence_id');
                        $status = $this->Get('status');
                        $ci_id = $this->Get('functionalci_id');
                        if ($eq_id)
                        {
                            // Определяем список SCLI эквивалентных нам
                            
                            $oSearch = DBSearch::FromOQL("SELECT FunctionalSCLI WHERE scliequivalence_id = '$eq_id'");
                            $oSet = new DBObjectSet($oSearch);
                            $oSet->Seek(0);
                            while ($oObject = $oSet->Fetch())
                            {
                                $searchSCLI_id = $oObject->GetKey();
                                $oSearch = DBSearch::FromOQL("SELECT InstanceOfFunctionalSCLI WHERE securitychecklistitem_id = '$searchSCLI_id' AND functionalci_id = '$ci_id'");
                                $oResultSet = new DBObjectSet($oSearch);
                                $oResultSet->Seek(0);
                                while ($oResult = $oResultSet->Fetch())
                                {
                                    if ($status != $oResult->Get('status'))
                                    {
                                        $oResult->Set('status',$status);
                                        $oResult->DBWrite();
                                    }
                                }    
                            }    
                        }
                    } 
                    

}


class SecurityCheckList extends SecurityCI
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => 'name',
			'state_attcode' => '',
			'reconc_keys' => array('name'),
			'db_table' => 'securitychecklist',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeLinkedSet("scli_list", array("linked_class"=>'SecurityCheckListItem', "ext_key_to_me"=>'securitychecklist_id', "count_min"=>0, "count_max"=>0, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'name',
  1 => 'description',
  2 => 'managers_list',
  3 => 'documents_list',
  4 => 'scli_list',
  5 => 'tickets_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'name',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'name',
));

	}



	
                    function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
	                {
		                parent::DisplayBareRelations($oPage, $bEditMode);

		                
		                // search for checklist items that have no instance
		                
		                $sClass = 'SecurityCheckListItem';
		                $oItemNotHaveInstanceSet = DBObjectSet::FromScratch($sClass);
		                $oItemHaveUncompletedInstanceSet = DBObjectSet::FromScratch($sClass);
		                $oItemHaveOnlycompletedInstanceSet = DBObjectSet::FromScratch($sClass);
		                $MyID = $this->GetKey();
		                $sExtKeyToMe = 'securitychecklist_id';
		                $oSearch = DBSearch::FromOQL("SELECT $sClass WHERE $sExtKeyToMe = '$MyID'");
		                $oItemSet = new DBObjectSet($oSearch);
		                $sClass = 'SecurityCheckListItemInstance';
		                $sExtKeyToMe = 'securitychecklistitem_id';
		                $sStatusAtt = 'status';
		                $sNotDone = 'not_done';
		                $sDone = 'done';		                
		                $oItemSet->Seek(0);
		                while ($oItem = $oItemSet->Fetch())
		                {
		                    $ItemID = $oItem->GetKey();
		                    $oSearchNotDone = DBSearch::FromOQL("SELECT $sClass WHERE $sExtKeyToMe = '$ItemID' AND $sStatusAtt = '$sNotDone'");
		                    $oSetNotDone = new DBObjectSet($oSearchNotDone);
		                    $oSearchDone = DBSearch::FromOQL("SELECT $sClass WHERE $sExtKeyToMe = '$ItemID' AND $sStatusAtt = '$sDone'");
		                    $oSetDone = new DBObjectSet($oSearchDone);
		                    if ($oSetNotDone->Count() != 0)
		                    {
		                        $oItemHaveUncompletedInstanceSet->AddObject($oItem);
		                    }
		                    elseif ($oSetDone->Count() != 0)
		                    {
		                        $oItemHaveOnlycompletedInstanceSet->AddObject($oItem);
		                    }
		                    else
		                    {
		                        $oItemNotHaveInstanceSet->AddObject($oItem);
		                    }
		                    
		                }
		                
		                
		                
		                
		                if ($oItemNotHaveInstanceSet->Count() + $oItemHaveUncompletedInstanceSet->Count() + $oItemHaveOnlycompletedInstanceSet->Count() != 0)
		                {
		                    $sCount = ' ('.$oItemNotHaveInstanceSet->Count().' '.$oItemHaveUncompletedInstanceSet->Count().' '.$oItemHaveOnlycompletedInstanceSet->Count().')';
		                }
		                else
		                {
		                    $sCount = '';
		                }
		                
		                $oPage->SetCurrentTab(Dict::S('Class:SecurityCheckList/Tab:GroupedCheckListItems').$sCount);
		                $sClass = 'SecurityCheckListItem';
		                
		                $sBlockId = $sClass.'_Unassigned';
		                $sBlockHeader = Dict::S('Class:'.$sClass.'/BlockHeader:Unassigned');
		                $oPage->add('<fieldset>');
		                $oPage->add('<legend>'.$sBlockHeader.'</legend>');
		                $oBlock = DisplayBlock::FromObjectSet($oItemNotHaveInstanceSet, 'list');
		                $oBlock->Display($oPage, $sBlockId, array('menu' => false));
		                $oPage->add('</fieldset>');
		                
		                $sBlockId = $sClass.'_Uncompleted';
		                $sBlockHeader = Dict::S('Class:'.$sClass.'/BlockHeader:Uncompleted');
		                $oPage->add('<fieldset>');
		                $oPage->add('<legend>'.$sBlockHeader.'</legend>');
		                $oBlock = DisplayBlock::FromObjectSet($oItemHaveUncompletedInstanceSet, 'list');
		                $oBlock->Display($oPage, $sBlockId, array('menu' => false));
		                $oPage->add('</fieldset>');
		                
		                $sBlockId = $sClass.'_completed';
		                $sBlockHeader = Dict::S('Class:'.$sClass.'/BlockHeader:completed');
		                $oPage->add('<fieldset>');
		                $oPage->add('<legend>'.$sBlockHeader.'</legend>');
		                $oBlock = DisplayBlock::FromObjectSet($oItemHaveOnlycompletedInstanceSet, 'list');
		                $oBlock->Display($oPage, $sBlockId, array('menu' => false));
		                $oPage->add('</fieldset>');                
		                
	                }
	                

}


class lnkOrganizationToOrganizationalSCLI extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'is_link' => true,
			'name_attcode' => array('organizationalscli_id', 'org_id'),
			'state_attcode' => '',
			'reconc_keys' => array('organizationalscli_id', 'org_id'),
			'db_table' => 'lnkorganizationtoorganizationalscli',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("organizationalscli_id", array("targetclass"=>'OrganizationalSCLI', "allowed_values"=>null, "sql"=>'organizationalscli_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("organizationalscli_name", array("allowed_values"=>null, "extkey_attcode"=>'organizationalscli_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("org_id", array("targetclass"=>'Organization', "allowed_values"=>null, "sql"=>'org_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_name", array("allowed_values"=>null, "extkey_attcode"=>'org_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'organizationalscli_id',
  1 => 'org_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'organizationalscli_id',
  1 => 'org_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'organizationalscli_id',
  1 => 'org_id',
));

	}


	/**
                    * Placeholder for backward compatibility (iTop <= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */
 
                    protected function AfterInsert()
                    {
                        // Создаем реализацию правила для прилинкованной организации
                                             
                        $scli_id = $this->Get('organizationalscli_id');
                    
                        $org_id = $this->Get('org_id');
                    

                        $oNewInstance = MetaModel::NewObject('InstanceOfOrganizationalSCLI');
                        $oNewInstance->Set('name','-');
                        $oNewInstance->Set('securitychecklistitem_id',$scli_id);
                        $oNewInstance->Set('org_id',$org_id);
                        $oNewInstance->Set('status','not_done');
                        
                        // В отличии от тех. мер где скопом является группа КЕ и возможны пересечения скопов, 
                        // для орг. мер, скоп - это организация. Нам не надо искать возможные дубли
                        // реализаций правила созданные из-за пересечения скопов. Здесь не бывает пересечений.
                    
                        // ищем существующие реализации правил, принадлежащих нашему классу эквивалентности,
                        // имеющих значение status == done, возможно нам необходимо установить статус в done
                        // для нового элемента реализации правила
                        
                        // Выясняем id нашего эквивалента
                        
                        $oSearch = DBSearch::FromOQL("SELECT OrganizationalSCLI WHERE id = '$scli_id'");
                        $oSet = new DBObjectSet($oSearch);
                        $oObject = $oSet->Fetch();
                        $eq_id = $oObject->Get('scliequivalence_id');
                        if ($eq_id)
                        {
                            // Определяем список эквивалентных нам имеющих статус "выполнено"

                            $oSearch = DBSearch::FromOQL("SELECT InstanceOfOrganizationalSCLI WHERE scliequivalence_id = '$eq_id' AND org_id = '$org_id' AND status = 'done'");
                            $oResultSet = new DBObjectSet($oSearch);
                            if ($oResultSet->Count() != 0) // Список не пуст. Устанавливаем статус "выполнено"
                            {
                                $oNewInstance->Set('status','done');
                                $oNewInstance->Set('description','Статус установлен по найденному эквиваленту');
                            }    

                        }
                        $oNewInstance->DBWrite();
                    } 
                    

	/**
                    * Placeholder for backward compatibility (iTop <= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */
 
                    protected function AfterDelete()
                    {
                        // Уничтожаем реализации правила для этого скопа
                        
                        $scli_id = $this->Get('organizationalscli_id');
                    
                        $org_id = $this->Get('org_id');
                        
                        $oSearch = DBSearch::FromOQL("SELECT InstanceOfOrganizationalSCLI WHERE securitychecklistitem_id = '$scli_id' AND org_id = '$org_id'");
                        $oSet = new DBObjectSet($oSearch);
                        $oSet->Seek(0);
                        
                        while ($oObject = $oSet->Fetch())
                        {
                        
                            $oObject->DBDeleteSingleObject();
                        }                       
                        
                    } 
                    

}


class lnkGroupToFunctionalSCLI extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'is_link' => true,
			'name_attcode' => array('functionalscli_id', 'group_id'),
			'state_attcode' => '',
			'reconc_keys' => array('functionalscli_id', 'group_id'),
			'db_table' => 'lnkgrouptofunctionalscli',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("functionalscli_id", array("targetclass"=>'FunctionalSCLI', "allowed_values"=>null, "sql"=>'functionalscli_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("functionalscli_name", array("allowed_values"=>null, "extkey_attcode"=>'functionalscli_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("group_id", array("targetclass"=>'Group', "allowed_values"=>null, "sql"=>'group_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("group_name", array("allowed_values"=>null, "extkey_attcode"=>'group_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'functionalscli_id',
  1 => 'group_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'functionalscli_id',
  1 => 'group_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'functionalscli_id',
  1 => 'group_id',
));

	}


	/**
                    * Placeholder for backward compatibility (iTop <= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */
 
                    public function DBInsert()
                    {
                        $ret = parent::DBInsert();                        
                        $scli_id = $this->Get('functionalscli_id');
                        
                        // $aCI_ids = $this->GetCI_ids();
                        
                        $aCI_ids = array();                        
                        $MyID = $this->Get('group_id');
                        $oSearch = DBSearch::FromOQL("SELECT lnkGroupToCI WHERE group_id = '$MyID'");
                        $oSet = new DBObjectSet($oSearch);
                        $oSet->Seek(0);
                        while ($oObject = $oSet->Fetch())
                        {
                            $aCI_ids[] = $oObject->Get('ci_id');
                        }
                        
                        foreach ($aCI_ids as $ci_id)
                        {

                            $oNewInstance = MetaModel::NewObject('InstanceOfFunctionalSCLI');
                            $oNewInstance->Set('name','-');
                            $oNewInstance->Set('securitychecklistitem_id',$scli_id);
                            $oNewInstance->Set('functionalci_id',$ci_id);
                            $oNewInstance->Set('status','not_done');
                            
                            // Может так случиться, что реализация правила для этого КЕ уже существует, 
                            // поскольку КЕ входит в другой скоп, которому также назначено это правило.
                            // Проверим это прежде чем продолжить.
                            
                            $oSearch = DBSearch::FromOQL("SELECT InstanceOfFunctionalSCLI WHERE securitychecklistitem_id = '$scli_id' AND functionalci_id = '$ci_id'");
                            $oSet = new DBObjectSet($oSearch);
                            
                            if ($oSet->Count() == 0) // Это новый экземпляр правила
                            {
                            
                            
                                // ищем существующие реализации правил, принадлежащих нашему классу эквивалентности,
                                // имеющих значение status == done, возможно нам необходимо установить статус в done
                                // для нового элемента реализации правила
                                
                                $oSearch = DBSearch::FromOQL("SELECT FunctionalSCLI WHERE id = '$scli_id'");
                                $oSet = new DBObjectSet($oSearch);
                                $oFunctionalSCLI = $oSet->Fetch();
                                $eq_id = $oFunctionalSCLI->Get('scliequivalence_id');
                                if ($eq_id)
                                {
                                    // Определяем список FunctionalSCLI эквивалентных нам
                                    
                                    $oSearch = DBSearch::FromOQL("SELECT FunctionalSCLI WHERE scliequivalence_id = '$eq_id'");
                                    $oSet = new DBObjectSet($oSearch);
                                    $oSet->Seek(0);
                                    while ($oObject = $oSet->Fetch())
                                    {
                                        $searchSCLI_id = $oObject->GetKey();
                                        $oSearch = DBSearch::FromOQL("SELECT InstanceOfFunctionalSCLI WHERE securitychecklistitem_id = '$searchSCLI_id' AND functionalci_id = '$ci_id' AND status = 'done'");
                                        $oResultSet = new DBObjectSet($oSearch);
                                        if ($oResultSet->Count() != 0)
                                        {
                                            $oNewInstance->Set('status','done');
                                            $oNewInstance->Set('description','Статус установлен по найденному эквиваленту');
                                            break;
                                        }    
                                    }     
                                }
                                $oNewInstance->DBInsertNoReload();
                                $oNewInstance->Reload();
                            }
                        }                          
                        return $ret;
                    } 
                    

	/**
                    * Placeholder for backward compatibility (iTop <= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */
 
                    protected function AfterDelete()
                    {
                        $scli_id = $this->Get('functionalscli_id');
                        $aCI_ids = array();                        
                        $MyID = $this->Get('group_id');
                        $oSearch = DBSearch::FromOQL("SELECT lnkGroupToCI WHERE group_id = '$MyID'");
                        $oSet = new DBObjectSet($oSearch);
                        $oSet->Seek(0);
                        while ($oObject = $oSet->Fetch())
                        {
                            $aCI_ids[] = $oObject->Get('ci_id');
                        }
                        foreach ($aCI_ids as $ci_id)
                        {
                            $oSearch = DBSearch::FromOQL("SELECT InstanceOfFunctionalSCLI WHERE securitychecklistitem_id = '$scli_id' AND functionalci_id = '$ci_id'");
                            $oSet = new DBObjectSet($oSearch);
                            if ($oSet->Count() !=0 )
                            {
                                while ($oObject = $oSet->Fetch())
                                {
                                    // Мы собрались уничтожить реализацию правила для КЕ в удаленном скопе.
                                    // Но возможно оно назначается для этого КЕ через другой скоп?
                                    // Это надо проверить.
                                    
                                    $iTotal = 0;
                                    
                                    $oGroupSearch = DBSearch::FromOQL("SELECT lnkGroupToCI WHERE ci_id = '$ci_id' AND group_id != '$MyID'");
                                    $oLinkSet = new DBObjectSet($oGroupSearch);
                                    if ($oLinkSet->Count() != 0)
                                    {
                                        $oLinkSet->Seek(0);
                                        
                                        while ($oLink = $oLinkSet->Fetch())
                                        {
                                            $group_id = $oLink->Get('group_id');
                                            $oScopeSearch = DBSearch::FromOQL("SELECT lnkGroupToFunctionalSCLI WHERE group_id = '$group_id' AND functionalscli_id = '$scli_id'");
                                            $oScopeSet = new DBObjectSet($oScopeSearch);
                                            $iTotal += $oScopeSet->Count();
                                        }
                                    }
                                    if ($iTotal == 0) // Других назначений нет. Этот экземпляр надо уничтожить
                                    {
                                        $oObject->DBDeleteSingleObject();
                                    }
                                }
                            }
                        }
                        
                    } 
                    

}
//
// Menus
//
class MenuCreation_esguardian_checklist_mgmt extends ModuleHandlerAPI
{
	public static function OnMenuCreation()
	{
		global $__comp_menus__; // ensure that the global variable is indeed global !
		$__comp_menus__['SecurityConfigManagement'] = new MenuGroup('SecurityConfigManagement', 21);
		$__comp_menus__['NewSecurityCheckList'] = new NewObjectMenuNode('NewSecurityCheckList', 'SecurityCheckList', $__comp_menus__['SecurityConfigManagement']->GetIndex(), 1);
		$__comp_menus__['NewSecurityCheckListItem'] = new NewObjectMenuNode('NewSecurityCheckListItem', 'SecurityCheckListItem', $__comp_menus__['SecurityConfigManagement']->GetIndex(), 2);
	}
} // class MenuCreation_esguardian_checklist_mgmt
