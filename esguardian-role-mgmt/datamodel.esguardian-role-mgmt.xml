<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0">
    <constants>
    </constants>
    <classes>
        <class id="SecurityRoleTemplate"  _delta="define">
            <parent>SecurityCI</parent>
            <properties>
                <category>bizmodel,searchable</category>
                <abstract>false</abstract>
                <db_table>securityroletemplate</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field/>
                <naming>
                    <attributes>
                        <attribute id="name"/>
                    </attributes>
                </naming>
                <display_template/>
                <reconciliation>
                    <attributes>
                        <attribute id="name"/>
                        <attribute id="org_id"/>
                        <attribute id="org_name"/>
                    </attributes>
                </reconciliation>
            </properties>
            <methods>
                <method id="GetConflictingRoles">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>public</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    public function GetConflictingRoles()
                    {
                        $sRoleListAttCode = 'roles_list';
                        $oResultSet = DBObjectSet::FromScratch('lnkSecurityRoleBidirectional');
                        if (MetaModel::IsValidAttCode(get_class($this), $sRoleListAttCode))
                        {
                            $oAttDef = MetaModel::GetAttributeDef(get_class($this), $sRoleListAttCode);
                            $sLnkClass = $oAttDef->GetLinkedClass();
                            $sExtKeyToMe = $oAttDef->GetExtKeyToMe();
                            $sExtKeyToRemote = $oAttDef->GetExtKeyToRemote();
                            $me = $this->GetKey();
                            $oSearch = DBSearch::FromOQL("SELECT $sLnkClass WHERE $sExtKeyToMe = '$me'");
                            $oSet = new DBObjectSet($oSearch);
                            if ($oSet->Count() == 0) 
                            {
                                return $oResultSet;
                            }
                            $oSet->Seek(0);
                            $aRoleIDs = array();
                            while ($oObject = $oSet->Fetch())
                            {
                                $aRoleIDs[] = $oObject->Get($sExtKeyToRemote);
                            }
                            $aConflictingRolesPairs = array();
                            foreach ($aRoleIDs as $RoleID)
                            {
                                $oSearch = DBSearch::FromOQL("SELECT lnkSecurityRoleBidirectional WHERE left_securityrole_id = '$RoleID'");
                                $oSet = new DBObjectSet($oSearch);
                                if ($oSet->Count() != 0)
                                {
                                    $oSet->Seek(0);
                                    while($oObject = $oSet->Fetch())
                                    {
                                        $NewID = $oObject->Get('right_securityrole_id');
                                        if (in_array($NewID,$aRoleIDs))
                                        {
                                            $aNewPair = array($RoleID,$NewID);
                                            $aNewPairSym = array($NewID,$RoleID);
                                            if (!(in_array($aNewPair,$aConflictingRolesPairs) || in_array($aNewPairSym,$aConflictingRolesPairs)))
                                            {
                                                $aConflictingRolesPairs[] = $aNewPair;
                                                $oResultSet->AddObject($oObject);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return $oResultSet; 
                    } 
                    ]]>
                    </code>
                </method>
                <method id="DisplayBareRelations">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-SecurityCI</type>
                    <code>
                    <![CDATA[ 
                    function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
                    {
                        parent::DisplayBareRelations($oPage, $bEditMode);
                        try
                        {
                            $oSet = $this->GetConflictingRoles();
                            $iTotal = $oSet->Count();

                            $sCount = ($iTotal > 0) ? ' ('.$iTotal.')' : '';
                            $oPage->SetCurrentTab(Dict::S('Class:SecurityRoleTemplate/Tab:ConflictingRoles').$sCount);
                            $sBlockId = 'TEST';
                            $oPage->add('<fieldset>');
                            $oBlock = DisplayBlock::FromObjectSet($oSet, 'list');
                            $oBlock->Display($oPage, $sBlockId, array('menu' => false));
                            $oPage->add('</fieldset>');
                        }
                        catch (Exception $e)
		                {
                			throw $e;
		                }
                    }
                    ]]>
                    </code>
                </method>
            </methods>
            <fields>
                <field id="roles_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
                    <linked_class>lnkSecurityRoleTemplateToSecurityRole</linked_class>
                    <ext_key_to_me>securityroletemplate_id</ext_key_to_me>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <ext_key_to_remote>securityrole_id</ext_key_to_remote>
                    <duplicates/>
                </field>
                <field id="applyto_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
                    <linked_class>lnkApplySRTemplateToPerson</linked_class>
                    <ext_key_to_me>securityroletemplate_id</ext_key_to_me>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <ext_key_to_remote>person_id</ext_key_to_remote>
                    <duplicates/>
                </field>
            </fields>
            <presentation>
                <details>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="org_id">
                            <rank>20</rank>
                        </item>
                        <item id="description">
                            <rank>30</rank>
                        </item>
                        <item id="managers_list">
                            <rank>40</rank>
                        </item> 
                        <item id="roles_list">
                            <rank>50</rank>
                        </item> 
                        <item id="applyto_list">
                            <rank>60</rank>
                        </item>                           
                        <item id="documents_list">
                            <rank>70</rank>
                        </item>
                        <item id="tickets_list">
                            <rank>80</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="org_id">
                            <rank>10</rank>
                        </item>
                        <item id="name">
                            <rank>30</rank>
                        </item>             
                    </items>
                </search>
                <list>
                    <items>
                        <item id="org_id">
                            <rank>10</rank>
                        </item>
                        <item id="name">
                            <rank>30</rank>
                        </item>             
                    </items>
                </list>
            </presentation>
        </class>
    
        <class id="lnkSecurityRoleTemplateToSecurityRole" _delta="define">
            <parent>cmdbAbstractObject</parent>
            <properties>
                <is_link>1</is_link>
                <category>bizmodel</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>lnksecurityroletemplatetosecurityrole</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field/>
                <naming>
                    <attributes>
                        <attribute id="securityroletemplate_id"/>
                        <attribute id="securityrole_id"/>
                    </attributes>
                </naming>
                <display_template/>
                <icon/>
                <reconciliation>
                    <attributes>
                        <attribute id="securityroletemplate_id"/>
                        <attribute id="securityrole_id"/>
                    </attributes>
                </reconciliation>
            </properties>
            <fields>
                <field id="securityroletemplate_id" xsi:type="AttributeExternalKey">
                    <sql>securityroletemplate_id</sql>
                    <target_class>SecurityRoleTemplate</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="securityroletemplate_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>securityroletemplate_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="securityrole_id" xsi:type="AttributeExternalKey">
                    <sql>securityrole_id</sql>
                    <target_class>SecurityRole</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="securityrole_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>securityrole_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
            </fields>
            <methods>
                <method id="GetLinkedPersonIDs">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function GetLinkedPersonIDs()
                    {
                        $aResult = array();
                        $TemlateID = $this->Get('securityroletemplate_id');
                        $oSearch = DBSearch::FromOQL("SELECT lnkApplySRTemplateToPerson WHERE securityroletemplate_id = '$TemlateID'");
                        $oSet = new DBObjectSet($oSearch);
                        if ($oSet->Count() == 0) {return $aResult;}
                        $oSet->Seek(0);
                        while ($oObject = $oSet->Fetch())
                        {
                            $aResult[] = $oObject->Get('person_id');
                        }                          
                        return $aResult;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="GetPersonRoleIDs">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function GetPersonRoleIDs($PersonID)
                    {
                        $aResult = array();
                        $oSearch = DBSearch::FromOQL("SELECT lnkPersonToSecurityRole WHERE person_id = '$PersonID'");
                        $oSet = new DBObjectSet($oSearch);
                        if ($oSet->Count() == 0) {return $aResult;}
                        $oSet->Seek(0);
                        while ($oObject = $oSet->Fetch())
                        {
                            $aResult[] = $oObject->Get('securityrole_id');
                        }                          
                        return $aResult;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="AddNewRoleForPerson">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function AddNewRoleForPerson($PersonID,$RoleID)
                    {
                        $NewPersonToSecurityRole = MetaModel::NewObject('lnkPersonToSecurityRole');
                        $NewPersonToSecurityRole->Set('person_id',$PersonID);
                        $NewPersonToSecurityRole->Set('securityrole_id',$RoleID);
                        $NewPersonToSecurityRole->DBInsert();                              
                        return;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="DBInsert">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                    <![CDATA[ 
                    public function DBInsert()
                    {
                        $ret = parent::DBInsert();
                        $ThisRoleID = $this->Get('securityrole_id');
                        $aPersonIDs = $this->GetLinkedPersonIDs();
                        foreach ($aPersonIDs as $PersonID)
                        {
                            $aPersonRoleIDs = GetPersonRoleIDs($PersonID);
                            if (!in_array($ThisRoleID,$aPersonRoleIDs))
                            {
                                $this->AddNewRoleForPerson($PersonID,$ThisRoleID);
                            }
                        }                           
                        return $ret;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="GetLinkedPersonOtherTemlatesRoleIDs">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function GetPersonOtherTemlatesRoleIDs($PersonID)
                    {
                        $aResult = array();
                        $aTemlateIDs = array();
                        $TemplateID = $this->Get('securityroletemplate_id');
                        $oSearch = DBSearch::FromOQL("SELECT lnkApplySRTemplateToPerson WHERE person_id = '$PersonID' AND securityroletemplate_id != '$TemplateID'");
                        $oSet = new DBObjectSet($oSearch);
                        if ($oSet->Count() == 0) {return $aResult;}
                        $oSet->Seek(0);
                        while ($oObject = $oSet->Fetch())
                        {
                            $aTemlateIDs[] = $oObject->Get('securityroletemplate_id');
                        }
                        foreach ($aTemlateIDs as $TemplateID)
                        {
                            $oSearch = DBSearch::FromOQL("SELECT lnkSecurityRoleTemplateToSecurityRole WHERE securityroletemplate_id = '$TemplateID'");
                            $oSet = new DBObjectSet($oSearch);
                            $oSet->Seek(0);
                            while ($oObject = $oSet->Fetch())
                            {
                                $NewRoleID = $oObject->Get('securityrole_id');
                                if (!in_array($NewRoleID,$aResult))
                                {
                                    $aResult[] = $NewRoleID;
                                }
                            }
                        }                         
                        return $aResult;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="RemoveRoleFromLinkedPerson">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function RemoveRoleFromPerson($PersonID,$RoleID)
                    {
                        $oObjectSet = new DBObjectSet(DBObjectSearch::FromOQL("SELECT lnkPersonToSecurityRole WHERE person_id='$PersonID' AND  securityrole_id='$RoleID'"));
                        $oObjectSet->Seek(0);
                        while ($oObject = $oObjectSet->Fetch())
                        {
                            $oObject->DBDeleteSingleObject();
                        }
                        return;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="AfterDelete">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                    <![CDATA[ 
                    protected function AfterDelete()
                    {
                        $ThisRoleID = $this->Get('securityrole_id');
                        $aPersonIDs = $this->GetLinkedPersonIDs();
                        foreach ($aPersonIDs as $PersonID)
                        {
                            $aOtherTemlatesRoleIDs = $this->GetPersonOtherTemlatesRoleIDs($PersonID);
                            if (!in_array($ThisRoleID,$aOtherTemlatesRoleIDs))
                            {
                                $this->RemoveRoleFromPerson($PersonID,$ThisRoleID);
                            }
                        } 

                        return;
                    } 
                    ]]>
                    </code>
                </method>
            </methods>
            <presentation>
                <details>
                    <items>
                        <item id="securityroletemplate_id">
                            <rank>10</rank>
                        </item>
                        <item id="securityrole_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="securityroletemplate_id">
                            <rank>10</rank>
                        </item>
                        <item id="securityrole_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="securityroletemplate_id">
                            <rank>10</rank>
                        </item>
                        <item id="securityrole_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>

        <class id="lnkApplySRTemplateToPerson" _delta="define">
            <parent>cmdbAbstractObject</parent>
            <properties>
                <is_link>1</is_link>
                <category>bizmodel</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>lnkapplysrtemplatetoperson</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field/>
                <naming>
                    <attributes>
                        <attribute id="securityroletemplate_id"/>
                        <attribute id="person_id"/>
                    </attributes>
                </naming>
                <display_template/>
                <icon/>
                <reconciliation>
                    <attributes>
                        <attribute id="securityroletemplate_id"/>
                        <attribute id="person_id"/>
                    </attributes>
                </reconciliation>
            </properties>
            <fields>
                <field id="securityroletemplate_id" xsi:type="AttributeExternalKey">
                    <sql>securityroletemplate_id</sql>
                    <target_class>SecurityRoleTemplate</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="securityroletemplate_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>securityroletemplate_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="person_id" xsi:type="AttributeExternalKey">
                    <sql>person_id</sql>
                    <target_class>Person</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="person_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>person_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
            </fields>
            <methods>
                <method id="GetLinkedPersonSecurityRoleIDs">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function GetLinkedPersonSecurityRoleIDs()
                    {
                        $aResult = array();
                        $PersonID = $this->Get('person_id');
                        $oSearch = DBSearch::FromOQL("SELECT lnkPersonToSecurityRole WHERE person_id = '$PersonID'");
                        $oSet = new DBObjectSet($oSearch);
                        if ($oSet->Count() == 0) {return $aResult;}
                        $oSet->Seek(0);
                        while ($oObject = $oSet->Fetch())
                        {
                            $aResult[] = $oObject->Get('securityrole_id');
                        }                          
                        return $aResult;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="GetTemplateSecurityRoleIDs">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function GetTemplateSecurityRoleIDs()
                    {
                        $aResult = array();
                        $TemplateID = $this->Get('securityroletemplate_id');
                        $oSearch = DBSearch::FromOQL("SELECT lnkSecurityRoleTemplateToSecurityRole WHERE securityroletemplate_id = '$TemplateID'");
                        $oSet = new DBObjectSet($oSearch);
                        if ($oSet->Count() == 0) {return $aResult;}
                        $oSet->Seek(0);
                        while ($oObject = $oSet->Fetch())
                        {
                            $aResult[] = $oObject->Get('securityrole_id');
                        }                          
                        return $aResult;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="AddNewRoleForLinkedPerson">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function AddNewRoleForLinkedPerson($RoleID)
                    {
                        $NewPersonToSecurityRole = MetaModel::NewObject('lnkPersonToSecurityRole');
                        $NewPersonToSecurityRole->Set('person_id',$this->Get('person_id'));
                        $NewPersonToSecurityRole->Set('securityrole_id',$RoleID);
                        $NewPersonToSecurityRole->DBInsert();                              
                        return;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="RemoveRoleFromLinkedPerson">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function RemoveRoleFromLinkedPerson($RoleID)
                    {
                        $LinkedPersonID = $this->Get('person_id');
                        $oObjectSet = new DBObjectSet(DBObjectSearch::FromOQL("SELECT lnkPersonToSecurityRole WHERE person_id='$LinkedPersonID' AND  securityrole_id='$RoleID'"));
                        $oObjectSet->Seek(0);
                        while ($oObject = $oObjectSet->Fetch())
                        {
                            $oObject->DBDeleteSingleObject();
                        }
                        return;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="DBInsert">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                    <![CDATA[ 
                    public function DBInsert()
                    {
                        $ret = parent::DBInsert();
                        $aPersonRoles = $this->GetLinkedPersonSecurityRoleIDs();
                        $aTemlateRoles = $this->GetTemplateSecurityRoleIDs();
                        foreach ($aTemlateRoles as $RoleID)
                        {
                            if (!in_array($RoleID,$aPersonRoles))
                            {
                                $this->AddNewRoleForLinkedPerson($RoleID);
                            }
                        }                           
                        return $ret;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="GetLinkedPersonOtherTemlatesRoleIDs">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>private</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    private function GetLinkedPersonOtherTemlatesRoleIDs()
                    {
                        $aResult = array();
                        $aTemlateIDs = array();
                        $PersonID = $this->Get('person_id');
                        $TemplateID = $this->Get('securityroletemplate_id');
                            
                        $oSearch = DBSearch::FromOQL("SELECT lnkApplySRTemplateToPerson WHERE person_id = '$PersonID' AND securityroletemplate_id != '$TemplateID'");
                        $oSet = new DBObjectSet($oSearch);
                        if ($oSet->Count() == 0) {return $aResult;}
                        $oSet->Seek(0);
                        while ($oObject = $oSet->Fetch())
                        {
                            $aTemlateIDs[] = $oObject->Get('securityroletemplate_id');
                        }
                        foreach ($aTemlateIDs as $TemplateID)
                        {
                            $oSearch = DBSearch::FromOQL("SELECT lnkSecurityRoleTemplateToSecurityRole WHERE securityroletemplate_id = '$TemplateID'");
                            $oSet = new DBObjectSet($oSearch);
                            $oSet->Seek(0);
                            while ($oObject = $oSet->Fetch())
                            {
                                $NewRoleID = $oObject->Get('securityrole_id');
                                if (!in_array($NewRoleID,$aResult))
                                {
                                    $aResult[] = $NewRoleID;
                                }
                            }
                        }                         
                        return $aResult;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="AfterDelete">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                    <![CDATA[ 
                    protected function AfterDelete()
                    {
                        $aPersonRoles = $this->GetLinkedPersonSecurityRoleIDs();
                        $aTemlateRoles = $this->GetTemplateSecurityRoleIDs();
                        $aOtherTemlatesRoles = $this->GetLinkedPersonOtherTemlatesRoleIDs();
                        foreach ($aPersonRoles as $RoleID)
                        {
                            if ((in_array($RoleID,$aTemlateRoles)) && (!in_array($RoleID,$aOtherTemlatesRoles)))
                            {
                               $this->RemoveRoleFromLinkedPerson($RoleID);
                            }
                        } 
                        return;
                    } 
                    ]]>
                    </code>
                </method>        
            </methods>
            <presentation>
                <details>
                    <items>
                        <item id="securityroletemplate_id">
                            <rank>10</rank>
                        </item>
                        <item id="person_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="securityroletemplate_id">
                            <rank>10</rank>
                        </item>
                        <item id="person_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="securityroletemplate_id">
                            <rank>10</rank>
                        </item>
                        <item id="person_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>  
    
        <class id="SecurityRole"  _delta="define">
            <parent>SecurityCI</parent>
            <properties>
                <category>bizmodel,searchable</category>
                <abstract>true</abstract>
                <db_table>securityrole</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field>finalclass</db_final_class_field>
                <naming>
                    <attributes>
                        <attribute id="name"/>
                    </attributes>
                </naming>
                <display_template/>
                <reconciliation>
                    <attributes>
                        <attribute id="name"/>
                        <attribute id="org_id"/>
                        <attribute id="org_name"/>
                        <attribute id="finalclass"/>
                    </attributes>
                </reconciliation>
            </properties>
            <methods/>
            <fields>
                <field id="occupants_list" xsi:type="AttributeLinkedSetIndirect">
                    <linked_class>lnkPersonToSecurityRole</linked_class>
                    <ext_key_to_me>securityrole_id</ext_key_to_me>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <ext_key_to_remote>person_id</ext_key_to_remote>
                    <duplicates/>
                </field>
                <field id="conflictingroles_list" xsi:type="AttributeLinkedSetIndirect">
                    <linked_class>lnkSecurityRoleBidirectional</linked_class>
                    <ext_key_to_me>left_securityrole_id</ext_key_to_me>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <ext_key_to_remote>right_securityrole_id</ext_key_to_remote>
                    <duplicates/>
                </field>
            </fields>
            <presentation>
                <details>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="org_id">
                            <rank>20</rank>
                        </item>
                        <item id="occupants_list">
                            <rank>30</rank>
                        </item>
                        <item id="documents_list">
                            <rank>70</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="finalclass">
                            <rank>10</rank>
                        </item>
                        <item id="name">
                            <rank>20</rank>
                        </item>
                        <item id="org_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="finalclass">
                            <rank>10</rank>
                        </item>
                        <item id="name">
                            <rank>20</rank>
                        </item>
                        <item id="org_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>

        <class id="ApplicationRole"  _delta="define">
            <parent>SecurityRole</parent>
            <properties>
                <category>bizmodel,searchable</category>
                <abstract>false</abstract>
                <db_table>applicationrole</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field/>
                <naming>
                    <attributes>
                        <attribute id="name"/>
                    </attributes>
                </naming>
                <display_template/>
                <reconciliation>
                    <attributes>
                        <attribute id="name"/>
                        <attribute id="org_id"/>
                        <attribute id="org_name"/>
                    </attributes>
                </reconciliation>
            </properties>
            <methods/>
            <fields>
                <field id="applicationsolution_id" xsi:type="AttributeExternalKey">
                    <sql>applicationsolution_id</sql>
                    <default_value/>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                    <target_class>ApplicationSolution</target_class>
                    <filter>SELECT ApplicationSolution WHERE org_id = :this->org_id</filter>
                    <dependencies>
                        <attribute id="org_id" />
                    </dependencies>
                </field>
                <field id="applicationsolution_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>applicationsolution_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
            </fields>
            <presentation>
                <details>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="org_id">
                            <rank>20</rank>
                        </item>
                        <item id="applicationsolution_id">
                            <rank>30</rank>
                        </item>
                        <item id="description">
                            <rank>35</rank>
                        </item>                    
                        <item id="occupants_list">
                            <rank>40</rank>
                        </item>
                        <item id="conflictingroles_list">
                            <rank>50</rank>
                        </item>
                        <item id="documents_list">
                            <rank>70</rank>
                        </item>
                        <item id="tickets_list">
                            <rank>80</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="org_id">
                            <rank>10</rank>
                        </item>
                        <item id="applicationsolution_id">
                            <rank>20</rank>
                        </item>
                        <item id="name">
                            <rank>30</rank>
                        </item>             
                    </items>
                </search>
                <list>
                    <items>
                        <item id="org_id">
                            <rank>10</rank>
                        </item>
                        <item id="applicationsolution_id">
                            <rank>20</rank>
                        </item>
                        <item id="name">
                            <rank>30</rank>
                        </item>             
                    </items>
                </list>
            </presentation>
        </class>
    
        <class id="BusinessRole"  _delta="define">
            <parent>SecurityRole</parent>
            <properties>
                <category>bizmodel,searchable</category>
                <abstract>false</abstract>
                <db_table>businessrole</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field/>
                <naming>
                    <attributes>
                        <attribute id="name"/>
                    </attributes>
                </naming>
                <display_template/>
                <reconciliation>
                    <attributes>
                        <attribute id="name"/>
                        <attribute id="org_id"/>
                        <attribute id="org_name"/>
                    </attributes>
                </reconciliation>
            </properties>
            <methods/>
            <fields>
                <field id="businessprocess_id" xsi:type="AttributeExternalKey">
                    <sql>businessprocess_id</sql>
                    <default_value/>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                    <target_class>BusinessProcess</target_class>
                    <filter>SELECT BusinessProcess WHERE org_id = :this->org_id</filter>
                    <dependencies>
                        <attribute id="org_id" />
                    </dependencies>
                </field>
                <field id="businessprocess_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>businessprocess_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
            </fields>
            <presentation>
                <details>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="org_id">
                            <rank>20</rank>
                        </item>
                        <item id="businessprocess_id">
                            <rank>30</rank>
                        </item>
                        <item id="description">
                            <rank>35</rank>
                        </item>                    
                        <item id="occupants_list">
                            <rank>40</rank>
                        </item>
                        <item id="conflictingroles_list">
                            <rank>50</rank>
                        </item>
                        <item id="documents_list">
                            <rank>70</rank>
                        </item>
                        <item id="tickets_list">
                            <rank>80</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="org_id">
                            <rank>10</rank>
                        </item>
                        <item id="businessprocess_id">
                            <rank>20</rank>
                        </item>
                        <item id="name">
                            <rank>30</rank>
                        </item>             
                    </items>
                </search>
                <list>
                    <items>
                        <item id="org_id">
                            <rank>10</rank>
                        </item>
                        <item id="businessprocess_id">
                            <rank>20</rank>
                        </item>
                        <item id="name">
                            <rank>30</rank>
                        </item>             
                    </items>
                </list>
            </presentation>
        </class>

        <class id="ApplicationSolution">
            <fields>
                <field id="roles_list" xsi:type="AttributeLinkedSet" _delta="define">
                    <linked_class>ApplicationRole</linked_class>
                    <ext_key_to_me>applicationsolution_id</ext_key_to_me>
                </field>
            </fields>
            <presentation>
                <details>
                    <items>                        
                        <item id="roles_list" _delta="define">
                            <rank>140</rank>
                        </item>
                    </items>
                </details>
            </presentation>
        </class>

        <class id="BusinessProcess">
            <fields>
                <field id="roles_list" xsi:type="AttributeLinkedSet" _delta="define">
                    <linked_class>BusinessRole</linked_class>
                    <ext_key_to_me>businessprocess_id</ext_key_to_me>
                </field>
            </fields>
            <presentation>
                <details>
                    <items>                        
                        <item id="roles_list" _delta="define">
                            <rank>110</rank>
                        </item>
                    </items>
                </details>
            </presentation>
        </class>
        
        <class id="Person">
            <fields>
                <field id="roles_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
                    <linked_class>lnkPersonToSecurityRole</linked_class>
                    <ext_key_to_me>person_id</ext_key_to_me>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <ext_key_to_remote>securityrole_id</ext_key_to_remote>
                    <duplicates/>
                </field>
            </fields>
            <methods>
                <method id="GetPersonConflictingRoles" _delta="define">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>public</access>
                    <type>Custom</type>
                    <code>
                    <![CDATA[ 
                    public function GetPersonConflictingRoles()
                    {
                        $sRoleListAttCode = 'roles_list';
                        $oResultSet = DBObjectSet::FromScratch('lnkSecurityRoleBidirectional');
                        if (MetaModel::IsValidAttCode(get_class($this), $sRoleListAttCode))
                        {
                            $oAttDef = MetaModel::GetAttributeDef(get_class($this), $sRoleListAttCode);
                            $sLnkClass = $oAttDef->GetLinkedClass();
                            $sExtKeyToMe = $oAttDef->GetExtKeyToMe();
                            $sExtKeyToRemote = $oAttDef->GetExtKeyToRemote();
                            $me = $this->GetKey();
                            $oSearch = DBSearch::FromOQL("SELECT $sLnkClass WHERE $sExtKeyToMe = '$me'");
                            $oSet = new DBObjectSet($oSearch);
                            if ($oSet->Count() == 0) 
                            {
                                return $oResultSet;
                            }
                            $oSet->Seek(0);
                            $aRoleIDs = array();
                            while ($oObject = $oSet->Fetch())
                            {
                                $aRoleIDs[] = $oObject->Get($sExtKeyToRemote);
                            }
                            $aConflictingRolesPairs = array();
                            foreach ($aRoleIDs as $RoleID)
                            {
                                $oSearch = DBSearch::FromOQL("SELECT lnkSecurityRoleBidirectional WHERE left_securityrole_id = '$RoleID'");
                                $oSet = new DBObjectSet($oSearch);
                                if ($oSet->Count() != 0)
                                {
                                    $oSet->Seek(0);
                                    while($oObject = $oSet->Fetch())
                                    {
                                        $NewID = $oObject->Get('right_securityrole_id');
                                        if (in_array($NewID,$aRoleIDs))
                                        {
      
                                            $aNewPair = array($RoleID,$NewID);
                                            $aNewPairSym = array($NewID,$RoleID);
                                            if (!(in_array($aNewPair,$aConflictingRolesPairs) || in_array($aNewPairSym,$aConflictingRolesPairs)))
                                            {
                                                $aConflictingRolesPairs[] = $aNewPair;
                                                $oResultSet->AddObject($oObject);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return $oResultSet; 
                    } 
                    ]]>
                    </code>
                </method>
                <method id="GetRelationQueries" _delta="define">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>true</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                    <![CDATA[ 
                    public static function GetRelationQueries($sRelCode)
                    {
                        return parent::GetRelationQueries($sRelCode);
                    } 
                    ]]>
                    </code>
                </method>
                <method id="DisplayBareRelations" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-cmdbAbstractObject</type>
                    <code>
                    <![CDATA[ 
                    function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
                    {
                        parent::DisplayBareRelations($oPage, $bEditMode);
                        try
                        {
                            $oSet = $this->GetPersonConflictingRoles();
                            $iTotal = $oSet->Count();

                            $sCount = ($iTotal > 0) ? ' ('.$iTotal.')' : '';
                            $oPage->SetCurrentTab(Dict::S('Class:Person/Tab:ConflictingRoles').$sCount);
                            $sBlockId = 'TEST';
                            $oPage->add('<fieldset>');
                            $oBlock = DisplayBlock::FromObjectSet($oSet, 'list');
                            $oBlock->Display($oPage, $sBlockId, array('menu' => false));
                            $oPage->add('</fieldset>');
                        }
                        catch (Exception $e)
	                    {
                			throw $e;
	                    }
                    }
                    ]]>
                    </code>
                </method>
            </methods>
            <presentation>
                <details>
                    <items>
                        <item id="roles_list" _delta="define">
                            <rank>35</rank>
                        </item>
                    </items>
                </details>
            </presentation>
        </class>

        <class id="lnkPersonToSecurityRole" _delta="define">
            <parent>cmdbAbstractObject</parent>
            <properties>
            <is_link>1</is_link>
            <category>bizmodel</category>
            <abstract>false</abstract>
            <key_type>autoincrement</key_type>
            <db_table>lnkpersontosecurityrole</db_table>
            <db_key_field>id</db_key_field>
            <db_final_class_field/>
            <naming>
                <attributes>
                    <attribute id="securityrole_id"/>
                    <attribute id="person_id"/>
                </attributes>
            </naming>
            <display_template/>
            <icon/>
            <reconciliation>
                <attributes>
                    <attribute id="securityrole_id"/>
                    <attribute id="person_id"/>
                </attributes>
            </reconciliation>
            </properties>
            <fields>
                <field id="securityrole_id" xsi:type="AttributeExternalKey">
                    <sql>securityrole_id</sql>
                    <target_class>SecurityRole</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="securityrole_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>securityrole_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="person_id" xsi:type="AttributeExternalKey">
                    <sql>person_id</sql>
                    <target_class>Person</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="person_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>person_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
            </fields>
            <methods/>
            <presentation>
                <details>
                    <items>
                        <item id="securityrole_id">
                            <rank>10</rank>
                        </item>
                        <item id="person_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="securityrole_id">
                            <rank>10</rank>
                        </item>
                        <item id="person_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="securityrole_id">
                            <rank>10</rank>
                        </item>
                        <item id="person_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>

        <class id="lnkSecurityRoleBidirectional" _delta="define">
            <parent>cmdbAbstractObject</parent>
            <properties>
                <is_link>1</is_link>
                <category>bizmodel</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>lnksecurityrolebidirectional</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field/>
                <naming>
                    <attributes>
                        <attribute id="left_securityrole_id"/>
                        <attribute id="right_securityrole_id"/>
                    </attributes>
                </naming>
                <display_template/>
                <icon/>
                <reconciliation>
                    <attributes>
                        <attribute id="left_securityrole_id"/>
                        <attribute id="right_securityrole_id"/>
                    </attributes>
                </reconciliation>
            </properties>
            <fields>
                <field id="left_securityrole_id" xsi:type="AttributeExternalKey">
                    <sql>left_securityrole_id</sql>
                    <target_class>SecurityRole</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="left_securityrole_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>left_securityrole_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="right_securityrole_id" xsi:type="AttributeExternalKey">
                    <sql>right_securityrole_id</sql>
                    <target_class>SecurityRole</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="right_securityrole_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>right_securityrole_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
            </fields>
            <methods>
                <method id="DBInsert">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                    <![CDATA[ 
                    public function DBInsert()
                    {
                        $ret = parent::DBInsert();
                        $oMyClone = clone $this;
                        $mem_left = $oMyClone->Get('left_securityrole_id');
                        $mem_right = $oMyClone->Get('right_securityrole_id');
                        $oMyClone->Set('left_securityrole_id',$mem_right);
                        $oMyClone->Set('right_securityrole_id',$mem_left);
                        $oMyClone->DBInsertNoReload();
                        $oMyClone->Reload();
                        return $ret;
                    } 
                    ]]>
                    </code>
                </method>
                <method id="AfterDelete">
                    <comment>/**
                    * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
                    * in case an extension attempts to redefine this function...     
                    */</comment>
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                    <![CDATA[ 
                    protected function AfterDelete()
                    {
                        $mem_left = $this->Get('right_securityrole_id');
                        $mem_right = $this->Get('left_securityrole_id');
                        $oObjectSet = new DBObjectSet(DBObjectSearch::FromOQL("SELECT lnkSecurityRoleBidirectional WHERE left_securityrole_id='$mem_left' AND  right_securityrole_id='$mem_right'"));
                        $oObjectSet->Seek(0);
                        while ($oObject = $oObjectSet->Fetch())
                        {
                            $oObject->DBDeleteSingleObject();
                        }
                        return;
                    } 
                    ]]>
                    </code>
                </method>
            </methods>
            <presentation>
                <details>
                    <items>
                        <item id="left_securityrole_id">
                            <rank>10</rank>
                        </item>
                        <item id="right_securityrole_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="left_securityrole_id">
                            <rank>10</rank>
                        </item>
                        <item id="right_securityrole_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="left_securityrole_id">
                            <rank>10</rank>
                        </item>
                        <item id="right_securityrole_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>
    </classes>
    <menus>
        <menu id="NewBusinessRole" xsi:type="NewObjectMenuNode" _delta="define">
            <rank>3</rank>
            <parent>SecurityConfigManagement</parent>
            <class>BusinessRole</class>
        </menu>
        <menu id="NewApplicationRole" xsi:type="NewObjectMenuNode" _delta="define">
            <rank>4</rank>
            <parent>SecurityConfigManagement</parent>
            <class>ApplicationRole</class>
        </menu>
        <menu id="NewSecurityRoleTemplate" xsi:type="NewObjectMenuNode" _delta="define">
            <rank>5</rank>
            <parent>SecurityConfigManagement</parent>
            <class>SecurityRoleTemplate</class>
        </menu>
    </menus>
    <user_rights>
        <groups>
            <group id="SecurityRoles" _delta="define">
                <classes>
                    <class id="SecurityRoleTemplate"/>
                    <class id="BusinessRole"/>
                    <class id="ApplicationRole"/>
                    <class id="lnkSecurityRoleBidirectional"/>
                    <class id="lnkDocumentToSecurityCI"/>
                    <class id="lnkPersonToSecurityRole"/>
                    <class id="lnkPersonAsManagerOfSecurityCI"/>
                    <class id="lnkSecurityRoleTemplateToSecurityRole"/>
                    <class id="lnkApplySRTemplateToPerson"/>                    
                </classes>
            </group>
        </groups>
        <profiles>
            <profile id="301" _delta="define">
                <name>Security Role Manager</name>
                <description>Person in charge of the documentation of the managed Security Roles</description>
                <groups>
                    <group id="General">
                        <actions>
                            <action id="action:write">allow</action>
                            <action id="action:bulk write">allow</action>
                            <action id="action:delete">allow</action>
                        </actions>
                    </group>
                    <group id="Documentation">
                        <actions>
                            <action id="action:write">allow</action>
                            <action id="action:bulk write">allow</action>
                            <action id="action:delete">allow</action>
                        </actions>
                    </group>
                    <group id="SecurityRoles">
                        <actions>
                            <action id="action:write">allow</action>
                            <action id="action:bulk write">allow</action>
                            <action id="action:delete">allow</action>
                        </actions>
                    </group>
                    <group id="*">
                        <actions>
                            <action id="action:read">allow</action>
                            <action id="action:bulk read">allow</action>
                        </actions>
                    </group>
                </groups>
            </profile>
        </profiles>
    </user_rights>        
</itop_design>
    
    